---
title: "Assignment 4"
author: "Kyra Guy"
format:
  html:
    embed-resources: true
editor: visual
---

## Make things run faster

```{r}

# Total row sums
fun1 <- function(mat) {
  n <- nrow(mat)
  ans <- double(n) 
  for (i in 1:n) {
    ans[i] <- sum(mat[i, ])
  }
  ans
}

```

```{r}

#new
fun1alt <- function(mat) {
  rowSums(mat)
}

```

```{r}
# Cumulative sum by row
fun2 <- function(mat) {
  n <- nrow(mat)
  k <- ncol(mat)
  ans <- mat
  for (i in 1:n) {
    for (j in 2:k) {
      ans[i,j] <- mat[i, j] + ans[i, j - 1]
    }
  }
  ans
}
```

```{r}
fun2alt <- function(mat) {
  t(apply(mat, 1, cumsum))
}
```

## Question 1

```{r}

# Use the data with this code
set.seed(2315)
dat <- matrix(rnorm(200 * 100), nrow = 200)

# Test for the first
microbenchmark::microbenchmark(
  fun1(dat),
  fun1alt(dat), unit = "relative"
)
```

```{r}

# Test for the second
microbenchmark::microbenchmark(
  fun2(dat),
  fun2alt(dat), unit = "relative"
)
```

Parallel Computing

```{r}
sim_pi <- function(n = 1000, i = NULL) {
  p <- matrix(runif(n*2), ncol = 2)
  mean(rowSums(p^2) < 1) * 4
}

# Here is an example of the run
set.seed(156)
sim_pi(1000) # 3.132
```

```{r}
# This runs the simulation a 4,000 times, each with 10,000 points
set.seed(1231)
system.time({
  ans <- unlist(lapply(1:4000, sim_pi, n = 10000))
  print(mean(ans))
})
```

## Question 2

```{r}

library(parallel)

#simulate pi 
sim_pi <- function(n = 1000, i = NULL) {
  p <- matrix(runif(n * 2), ncol = 2)
  mean(rowSums(p^2) < 1) * 4
}

# Parallelized 
set.seed(1231)
cl <- makeCluster(detectCores())  # Create a cluster with the number of available cores
system.time({
  ans <- unlist(parLapply(cl, 1:4000, sim_pi, n = 10000))
  print(mean(ans))
})

stopCluster(cl) 
```

## SQL

```{r}

#install.packages(c("RSQLite", "DBI"))
```

```{r}
library(RSQLite)
library(DBI)

# Initialize a temporary in memory database
con <- dbConnect(SQLite(), ":memory:")

# Download tables
film <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film.csv")
film_category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/film_category.csv")
category <- read.csv("https://raw.githubusercontent.com/ivanceras/sakila/master/csv-sakila-db/category.csv")

# Copy data.frames to database
dbWriteTable(con, "film", film)
dbWriteTable(con, "film_category", film_category)
dbWriteTable(con, "category", category)
```

## Question 3

```{r}
# SQL query to count movies in each rating category
query <- "
  SELECT f.rating, COUNT(f.film_id) as num_movies
  FROM film f
  GROUP BY f.rating;
"

result <- dbGetQuery(con, query)

# Print the result
print(result)

```

## Question 4

```{r}
query <- "
  SELECT c.name as rating,
         AVG(f.replacement_cost) as avg_replacement_cost,
         AVG(f.rental_rate) as avg_rental_rate
  FROM film f
  JOIN film_category fc ON f.film_id = fc.film_id
  JOIN category c ON fc.category_id = c.category_id
  GROUP BY c.name;
"

result <- dbGetQuery(con, query)

# Print the result
print(result)

```

## Question 5

```{r}
query <- "
  SELECT fc.category_id, COUNT(f.film_id) as num_films
  FROM film_category fc
  JOIN film f ON fc.film_id = f.film_id
  GROUP BY fc.category_id;
"

result <- dbGetQuery(con, query)

# Print the result
print(result)

```

## Question 6

```{r}
query <- "
  SELECT c.name as category_name, COUNT(f.film_id) as num_films
  FROM film_category fc
  JOIN film f ON fc.film_id = f.film_id
  JOIN category c ON fc.category_id = c.category_id
  GROUP BY fc.category_id
  ORDER BY num_films DESC
  LIMIT 1;
"

result <- dbGetQuery(con, query)

# Print the result
print(result)

```
